

== Pubnub Mobile Push Gateway

PubNub's Mobile Push Gateway feature enables developers to bridge native PubNub publishing with 3rd-party push notification services including Google Android GCM (Google Cloud Messaging), Apple iOS APNS (Apple Push Notification Service), and Microsoft Windows Phone MPNS (Microsoft Push Notification Service).

By using the Mobile Push Gateway, developers can eliminate the need for developing, configuring, and maintaining additional server-side components for 3rd-party push notification providers.

===== When to use Native PubNub Messaging vs PubNub Mobile Push Gateway to 3rd-Party Messaging Services ?

For mission critical messaging, PubNub recommends implementing PubNub native messaging functionality. PubNub native messaging touts a low-latency, bi-directional notification solution that can be delivered to any mobile device, secure, access restricted, and encrypted message payloads of 32KB, and the ability to recover missed messages with Storage & Playback (history) APIs.

Despite the advantages of the native PubNub approach, there are cases where a developer may choose to utilize a 3rd-party notification system, for example, when migrating existing applications already utilizing 3rd-party notification systems to PubNub native messaging. On iOS applications where running in the background is not an option, the Mobile Push Gateway provides a method to send messages quickly and reliably via PubNub whether or not the application is in the foreground or background.


=== APNS
        TO BE ADDED

=== MPNS
        TO BE ADDED

=== GCM 

==== Details

====== GCM PREREQUISITES

Before you can push GCM messages natively through Google, or through PubNub, you must first setup your GCM configuration.

* Download the Google Play services SDK - http://developer.android.com/tools/help/sdk-manager.html
* Set Up Google Play Services SDK - http://developer.android.com/google/play-services/setup.html
* Create a Google API project - http://developer.android.com/google/gcm/gs.html#create-proj
* Enable the GCM Service - http://developer.android.com/google/gcm/gs.html#gcm-service
* Obtain an Google API Key - http://developer.android.com/google/gcm/gs.html#access-key
* Once you've obtained the API Key, login to the PubNub Admin Console, and scroll down to Push Notifications â†’ Google Cloud Messaging and click on "Add" to add your API Key. http://developer.android.com/google/gcm/gs.html provides additional information about this process.

====== ROUTING TO GCM-ENABLED DEVICES

When publishing a message associated with an GCM registration token, the message is sent to all PubNub native subscribers listening on that channel. For example, if you have native PubNub Python, Ruby, and JavaScript subscribers listening on channel foo, and you've previoulsy associated channel foo with GCM registration tokens abc, and xyz, when you publish hello world to channel foo, it will be received by the PubNub native Python, Ruby, and JavaScript subscribers.

In addition, the portion of the message encapsulated within a pn_gcm attribute, containing a valid GCM object messaging format (see below), will also be forwarded to Googles's GCM gateway, where it will be sent via GCM to Android devices with GCM registration tokens abc and xyz.

Behind the scenes, the PubNub Mobile Push Gateway establishes an authenticated connection to the Google GCM service based on the application's configured GCM API Key (which the developer has uploaded to the PubNub Admin Console). Assuming this API key, and application are configured correctly for Push Notifications, and the registration token has been associated with the PubNub channel the message was published on, Google will accept the GCM message for delivery.

====== GOOGLE API KEY.

This key is used by Google to authenticate your application for accounting purposes. This key is uploaded to the PubNub Administrator Console upon configuring your PubNub account to enable Mobile Push Gateway.

====== GCM REGISTRATION ID (NOTE: This is deprecated. InstanceId and registration token APIs should be used now on )

The first time an Android application needs to use the GCM service, it must call the GoogleCloudMessaging method register() which should return a Registration ID. This Registration ID is then associated with one or more channels. The Android application should store this ID for later use (for instance, to check in onCreate() if it is already registered.

====== GCM REGISTRATION TOKEN

PubNub Mobile Push Gateway uses registration token provided to relay messages to devices via GCM. These tokens are obtained using Instance ID API and can be associated to a channel using utility methods available in Pubnub Java and JS SDKs.

====== GCM SENDER ID

The Sender ID is created during the GCM registration process ( Sender ID is your GCM Project Number ) and is used to obtain registration token which permits PubNub Mobile Push Gateway push notification messages to be sent to the Android device via GCM.

==== Getting registration token and receiving messages

Once you have completed prerequisites for GCM as described above you can get the registration token using Google Instance Id APIs.

```
String senderId = "" ; /*  GCM Sender ID */
// Get registration token
InstanceID instanceID = InstanceID.getInstance(this);
String token = instanceID.getToken(getString(senderId),
        GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);
```
To receive message  GcmListenerService class which extends WakefulBroadcastReceiver can be used by overriding
onMessageReceived method.

```
@Override
public void onMessageReceived(String from, Bundle data) {
    String message = data.getString("message");
    Log.d(TAG, "From: " + from);
    Log.d(TAG, "Message: " + message);
}
```

Refer to https://developers.google.com/cloud-messaging/android/start for details.

=== Registering channel for device

C#, Obj-C, Java and Javascript family SDKs provide APIs to enable push notifications by associating device/registration tokens to channel names. These APIs are wrappers over REST interface.

==== REST
<TYPE> can be:

* gcm
* apns
* mpns
* if no type specified, server will default to apns (for backwards compatibility)

===== Register channel for device

Note: If both 'add' and 'remove' are provided, the remove will be executed first

.API
----
http://pubsub.pubnub.com/v1/push/sub-key/<SUB_KEY>/devices/<PUSH_TOKEN>?add=<CHANNEL>&type=<TYPE>
----

.Response
----
# Success
[1, "Modified Channels"]

# Error
----

.Registering an apple device for channel "m3"
----
http://dara24.devbuild.pubnub.com/v1/push/sub-key/sub-c-e0d8405a-b823-11e2-89ba-02ee2ddab7fe/devices/2ed202ac08ea9033665e853a3dc8bc4c5e78f7a6cf8d55910df230567037dcc4?type=apns&add=m3
----

.Registering a android device for channels "m1" and "m2"
----
http://dara24.devbuild.pubnub.com/v1/push/sub-key/sub-c-e0d8405a-b823-11e2-89ba-02ee2ddab7fe/devices/APA91bHThLx95RbKvOpIZyPStZMtqlOTvARPdWlvqNlcxxwkzgjSF88pKd_57vcy-ABUD1McjbyEmt603TJidwysvBMQh9Medh769nK2Kb8pe7QQILVxhsOnSOKqBu6yjFDCXasVif3XpVJOxaJasZcL7Kd6vuhLLuGt4gnnkNYy53SByBM7_cU?type=gcm&add=m1,m2
----

.Registering a windows phone device for channel "m1"
----
http://dara24.devbuild.pubnub.com/v1/push/sub-key/sub-c-e0d8405a-b823-11e2-89ba-02ee2ddab7fe/devices/http://dm2.notify.live.net/throttledthirdparty/01.00/AQECOVPaH3c6T4JWPQijts9xAgAAAAADAQAAAAQUZm52OkRFNzg2NTMxMzlFMEZFNkMFBlVTTkMwMQ?type=mpns&add=m1
----

===== Remove channel for device

Note: If both 'add' and 'remove' are provided, the remove will be executed first

----
http://pubsub.pubnub.com/v1/push/sub-key/<SUB_KEY>/devices/<PUSH_TOKEN>?remove=<CHANNEL>&type=<TYPE>
----

===== Get channels for device

----
http://pubsub.pubnub.com/v1/push/sub-key/<SUB_KEY>/devices/<PUSH_TOKEN>?type=<TYPE>
----

==== Remove device and all associated channels

----
http://pubsub.pubnub.com/v1/push/sub-key/<SUB_KEY>/devices/<PUSH_TOKEN>/remove?type=<TYPE>
----

==== C#
        TO BE ADDED

==== Obj-c

====== Registering device to channel

```

PNConfiguration *configuration = [PNConfiguration configurationWithPublishKey:@"demo"
                                                                  subscribeKey:@"demo"];
 self.client = [PubNub clientWithConfiguration:configuration];
 [self.client addPushNotificationsOnChannels:@[@"wwdc",@"google.io"] 
                         withDevicePushToken:self.devicePushToken
                               andCompletion:^(PNAcknowledgmentStatus *status) {
  
     // Check whether request successfully completed or not.
     if (!status.isError) {
         
        // Handle successful push notification enabling on passed channels.
     }
     // Request processing failed.
     else {
      
        // Handle modification error. Check 'category' property to find out possible issue because
        // of which request did fail.
        //
        // Request can be resent using: [status retry];
     }
 }];
 
```

====== Removing device from channel

```
PNConfiguration *configuration = [PNConfiguration configurationWithPublishKey:@"demo"
                                                                  subscribeKey:@"demo"];
 self.client = [PubNub clientWithConfiguration:configuration];
 [self.client removePushNotificationsFromChannels:@[@"wwdc",@"google.io"]
                              withDevicePushToken:self.devicePushToken
                                    andCompletion:^(PNAcknowledgmentStatus *status) {
  
     // Check whether request successfully completed or not.
     if (!status.isError) {
         
        // Handle successful push notification enabling on passed channels.
     }
     // Request processing failed.
     else {
      
        // Handle modification error. Check 'category' property to find out possible issue because
        // of which request did fail.
        //
        // Request can be resent using: [status retry];
     }
 }];
 
```

===== Get channels for device token

```
PNConfiguration *configuration = [PNConfiguration configurationWithPublishKey:@"demo"
                                                                  subscribeKey:@"demo"];
 self.client = [PubNub clientWithConfiguration:configuration];
 [self.client pushNotificationEnabledChannelsForDeviceWithPushToken:self.devicePushToken
                              andCompletion:^(PNAPNSEnabledChannelsResult *result,
                                              PNErrorStatus *status) {
  
     // Check whether request successfully completed or not.
     if (!status.isError) {
  
        // Handle downloaded list of chanels using: result.data.channels
     }
     // Request processing failed.
     else {
      
        // Handle audition error. Check 'category' property to find out possible issue because of 
        // which request did fail.
        //
        // Request can be resent using: [status retry];
     }
 }];
 
```
 

==== Javascript


To modify associations between a channel and an APNS or GCM Device ID, use the .mobile_gw_provision() method:

```
pubnub.mobile_gw_provision ({
     device_id: 'A655FBA9931AB',
     op       : 'add', // or 'remove'
     gw_type  : 'apns', // or 'gcm' or 'mpns'
     channel  : 'my_chat',
     callback : mySuccessCallback,
     error    : myErrorCallback,
});
```
After successfully associating device IDs with channels, publishing messages in the correct formats to those channels will result in all associated devices receiving the 3rd-party notifications.

==== Java

====== Registering device to channel

enablePushNotificationsOnChannel and its variant methods associate a channel to a registration token. 
```

pubnub.enablePushNotificationsOnChannel(channel, registrationToken, new Callback(){
    @Override
    public void successCallback(String channel, Object response) {
    }
    @Override
    public void errorCallback(String channel, PubnubError error) {
        
    }
});
```

====== Removing device from channel

disablePushNotificationsOnChannel and its variant methods associate a channel to a registration token. 
```

pubnub.disablePushNotificationsOnChannel(channel, registrationToken, new Callback(){
    @Override
    public void successCallback(String channel, Object response) {
    }
    @Override
    public void errorCallback(String channel, PubnubError error) {
        
    }
});
```

===== Listing channels for device token

requestPushNotificationEnabledChannelsForDeviceRegistrationId lists channels registered to device token

```

pubnub.requestPushNotificationEnabledChannelsForDeviceRegistrationId(registrationToken, new Callback(){
    @Override
    public void successCallback(String channel, Object response) {
    }
    @Override
    public void errorCallback(String channel, PubnubError error) {
        
    }
});
```


=== Sending messages to devices


==== ROUTING TO NATIVE AND SINGLE/MULTIPLE 3RD-PARTY MESSAGING ENDPOINTS IN A SINGLE PUBLISH

It is possible to structure a single message to contain different message payloads for native PubNub and multiple 3rd-Party endpoints. To do this, just specify root-level pn_apns, pn_gcm and pn_mpns keys with appropriate platform-specific data. Its important to remember that Native PubNub devices will receive the ENTIRE payload, but 3rd-Party endpoints will only receive the data encapsulated in their associated pn_* key. All or any one of these pn_* keys can be ommitted as required.

In the below example, associated iOS devices will receive only the data within the pn_apns key, and associated GCM devices will receive only the data within the pn_gcm key. Native PubNub subscribers will receive the entire literal object, including pn_apns, pn_gcm and full_game keys.

```
{
    "pn_apns": {
        "aps" : {
            "alert": "Game update 49ers touchdown",
            "badge": 2
        },
        "teams" : ["49ers", "raiders"],
        "score" : [7, 0]
    },
    "pn_gcm": {
        "data" : {
            "summary": "Game update 49ers touchdown",
            "teams" : ["49ers", "raiders"],
            "score" : [7, 0],
            "lastplay" : "5yd run up the middle"
        }
    },
    "pn_mpns" : {
        "type" : "flip",
        "title" : "Front title",
        "count" : 1,
        "back_title" : "Back Tile",
        "back_content" : "Back message"
    },
    "full_game" : {
        "date" : "2014.05.20",
        "foobar" : "Data that is not pertinent to devices"
    }
}
```
For any given published message, you may include any combination of pn_* and non-pn_* keys and data.



==== Payload

The push service piggy backs off a normal pubnub publish.  Therefore the entire payload (including platform push data) will be received by subscribers of that channel.

===== APNS/GCM Format

====== Old Format

* String (automatically converted into APNS payload)

* JSON
.. Requires platform specific object
... aps - object containing https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW1[aps fields]
 (ex. alert, badge, etc.)
.. pn_*
... Top level keys prefixed with "pn_" will not be included in push payload

====== New Format

* JSON
... pn_apns - object containing https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW1[aps fields] and user defined data
... pn_gcm - object containing http://developer.android.com/google/gcm/server.html#params[gcm fields] and user defined data
... pn_mpns
... (all data sent to push service must be enapsulated in the platform specific object)

If both 'aps' and 'pn_apns' are specified, consider it a new style payload and only consider 'pn_apns"

====== Params

pn_ttl:: Number of seconds until message expires (don't attempt delivery)

===== MPNS Format

Only toast and tile notifications are supported at this time.  Each type requires a properly formatted payload.

====== Toast

http://msdn.microsoft.com/en-us/library/windows/apps/jj662938(v=vs.105).aspx[Official docs]

======= Payload Parameters
[options="header", cols="1,1,1,5", width="100%"]
|====

|Parameter
|Type
|Required
|Description

a|+type+
|String
|Required
|"toast"

a|+delay+
|Integer
|Optional
|When the message will be delivered. Possible values are 0, 450, or 900. 0 is immediate and the others are in seconds. Defaults to 0.

a|+text1+
|String
|Optional
|Text

a|+text2+
|String
|Optional
|Text

a|+param+
|String
|Optional
|Link

|====

.Example
[source,javascript]
----
{
    "pn_mpns": {
        "type" : "toast",
        "text1" : "My title",
        "text2" : "More text here"
    }
}
----

====== Tile

There are three types of tiles: flip, cycle, iconic.

====== Clearing Values

All tile parameters except type and delay can be cleared by specifying JSON null value.  Normally, the Microsoft Push server will persist the value of a field until the field is set to another value.

.Set flip tile to "hello" and display count of 10
[source,javascript]
----
{
    "pn_mpns" : {
        "type" : "flip",
        "title" : "hello",
        "count" : 10
    }
}
----

.Next, erase the count.  The "hello" will still be present on the tile of the device (with no count displayed)
[source,javascript]
----
{
    "pn_mpns" : {
        "type" : "flip",
        "count" : null
    }
}
----

Alternative explanation: http://stackoverflow.com/a/20670628/11292

====== Flip

http://msdn.microsoft.com/en-us/library/windows/apps/jj206971(v=vs.105).aspx[Official docs]

===== Payload Parameters
[options="header", cols="1,1,1,5", width="100%"]
|====

|Parameter
|Type
|Required
|Description

a|+type+
|String
|Required
|"flip"

a|+delay+
|Integer
|Optional
|When the message will be delivered. Possible values are 0, 450, or 900. 0 is immediate and the others are in seconds. Defaults to 0.

a|+title+
|String
|Optional
|Text

a|+count+
|Integer
|Optional
|Numeric value displayed on tile

a|+small_background_image+
|String
|Optional
|URL

a|+background_image+
|String
|Optional
|URL

a|+back_background_image+
|String
|Optional
|URL

a|+back_content+
|String
|Optional
|Text

a|+back_title+
|String
|Optional
|Text

a|+wide_background_image+
|String
|Optional
|URL

a|+wide_back_background_image+
|String
|Optional
|URL

a|+wide_back_content+
|String
|Optional
|Text

|====

.Example
[source,javascript]
----
{
    "pn_mpns" : {
        "type" : "flip",
        "title" : "Front title",
        "count" : 1,
        "back_title" : "Back Tile",
        "back_content" : "Back message"
    }
}
----

====== Cycle

http://msdn.microsoft.com/en-us/library/windows/apps/jj207036(v=vs.105).aspx[Official docs]

===== Payload Parameters
[options="header", cols="1,1,1,5", width="100%"]
|====

|Parameter
|Type
|Required
|Description

a|+type+
|String
|Required
|"cycle"

a|+delay+
|Integer
|Optional
|When the message will be delivered. Possible values are 0, 450, or 900. 0 is immediate and the others are in seconds. Defaults to 0.

a|+title+
|String
|Optional
|Text

a|+count+
|Integer
|Optional
|Numeric value displayed on tile

a|+small_background_image+
|String
|Optional
|URL

a|+images+
|Array
|Optional
|List of URLs

|====

.Example
[source,javascript]
----
{
    "pn_mpns" : {
        "type" : "cycle",
        "title" : "Front title",
        "images" : [
            "http://example.com/image.png",
            "http://example.com/image2.png"
        ]
    }
}
----

====== Iconic

http://msdn.microsoft.com/en-us/library/windows/apps/jj207009(v=vs.105).aspx[Official docs]

===== Payload Parameters
[options="header", cols="1,1,1,5", width="100%"]
|====

|Parameter
|Type
|Required
|Description

a|+type+
|String
|Required
|"iconic"

a|+delay+
|Integer
|Optional
|When the message will be delivered. Possible values are 0, 450, or 900. 0 is immediate and the others are in seconds. Defaults to 0.

a|+title+
|String
|Optional
|Text

a|+count+
|Integer
|Optional
|Numeric value displayed on tile

a|+icon_image+
|String
|Optional
|URL

a|+small_icon_image+
|String
|Optional
|URL

a|+background_color+
|String
|Optional
|Hex ARGB format color (#FFFF0000 is red).

a|+wide_content_1+
|String
|Optional
|Text

a|+wide_content_2+
|String
|Optional
|Text

a|+wide_content_3+
|String
|Optional
|Text

|====

.Example
[source,javascript]
----
{
    "pn_mpns" : {
        "type" : "iconic",
        "title" : "Front title",
        "count" : 2
    }
}

{
	"pn_mpns":
	{
		"type": "iconic",
		"title": "ico3",
		"count": 3,
		"wide_content_1" : "wide content 1 goes here",
		"wide_content_2" : "wide content 2 goes here",
		"wide_content_3" : "wide content 3 goes here",
		"small_icon_image" : "http://cdn.flaticon.com/png/256/16528.png",
		"icon_image" : "http://cdn.flaticon.com/png/256/16529.png",
		"background_color" : "#FF00FF00"
	}
}

----

======= Examples

Recall that the entire contents of the message (including push specific data) will be received by subscribers of the channel.

=== *A. Publishing to APNS with simple string (old format)*
----
pubnub.publish("my_channel", "Game update - 49ers touchdown");
----

iOS device receives:
----
{
    "aps" : {
        "alert" : "Game update - 49ers touchdown"
    }
}
----

====== *B1. Publishing to APNS with `aps` object*
----
pubnub.publish("my_channel", {
    "aps": {
        "alert": "Game update 49ers touchdown"
    }
});
----

iOS device receives:
----
{
    "aps" : {
        "alert" : "Game update - 49ers touchdown"
    }
}
----

====== *B2. Publishing to APNS with `pn_apns` object (new format)*
----
pubnub.publish("my_channel", {
    "pn_apns": {
        "aps" : {
            "alert": "Game update 49ers touchdown"
        }
    }
});
----

iOS device receives:
----
{
    "aps" : {
        "alert" : "Game update - 49ers touchdown"
    }
}
----

====== *C1. Publishing to APNS with extra user data (old format)*

----
pubnub.publish("my_channel", {
    "aps": {
        "alert": "Game update 49ers touchdown"
    },
    "teams" : ["49ers", "raiders"],
    "score" : [7, 0]
});
----

iOS device receives:
----
{
    "aps": {
        "alert": "Game update 49ers touchdown"
    },
    "teams" : ["49ers", "raiders"],
    "score" : [7, 0]
}
----

====== *C2. Publishing to APNS with extra user data (new format)*

----
pubnub.publish("my_channel", {
    "pn_apns": {
        "aps" : {
            "alert": "Game update 49ers touchdown"
        },
        "teams" : ["49ers", "raiders"],
        "score" : [7, 0]
    }
});
----

iOS device receives:
----
{
    "aps" : {
        "alert": "Game update 49ers touchdown"
    },
    "teams" : ["49ers", "raiders"],
    "score" : [7, 0]
}
----

=== *D1. Publishing only some data to APNS while the rest sent through Pubnub (old format)*

----
pubnub.publish("my_channel", {
    "aps": {
        "alert": "Game update 49ers touchdown"
    },
    "teams" : ["49ers", "raiders"],
    "score" : [7, 0],
    "pn_other" : {
        "description" : "A really long description that would be invalid for APNS due to 256 byte max size",
        "user_list" : [1234, 4239, 3220, 3241, 866]
    }
});
----

iOS device receives:
----
{
    "aps": {
        "alert": "Game update 49ers touchdown"
    },
    "teams" : ["49ers", "raiders"],
    "score" : [7, 0]
}
----

"pn_other" was not included in APNS payload because the key name begins with "pn_".

=== *D2. Publishing only some data to APNS while the rest sent through Pubnub (new format)*

----
pubnub.publish("my_channel", {
    "pn_apns" : {
        "aps": {
            "alert": "Game update 49ers touchdown"
        },
        "teams" : ["49ers", "raiders"],
        "score" : [7, 0]
    },
    "pn_other" : {
        "description" : "A really long description that would be invalid for APNS due to 256 byte max size",
        "user_list" : [1234, 4239, 3220, 3241, 866]
    },
    "user_bio" : {
        "name": "John Doe",
        "age" : 20,
        "status" : "online"
    }
});
----

iOS device receives:
----
{
    "aps": {
        "alert": "Game update 49ers touchdown"
    },
    "teams" : ["49ers", "raiders"],
    "score" : [7, 0]
}
----

"pn_other"  and "user_bio" was not included in APNS payload because it was outside the "pn_apns" object.

====== *E. Publishing to APNS with extra user data in aps object*

This works even though the behavior is undocumented by Apple.  We won't restrict it, but we won't promote its usage in our docs either.

----
pubnub.publish("my_channel", {
    "aps": {
        "alert": "Game update 49ers touchdown",
        "badge": 2,
        "teams" : ["49ers", "raiders"],
        "score" : [7, 0]
    }
});
----

iOS device receives:
----
{
    "aps": {
        "alert": "Game update 49ers touchdown",
        "badge": 2,
        "teams" : ["49ers", "raiders"],
        "score" : [7, 0]
    }
}
----

=== *F. Publishing some data to APNS and other data to GCM*

----
pubnub.publish("my_channel", {
    "pn_apns": {
        "aps" : {
            "alert": "Game update 49ers touchdown",
            "badge": 2
        },
        "teams" : ["49ers", "raiders"],
        "score" : [7, 0]
    },
    "pn_gcm": {
        "data" : {
            "summary": "Game update 49ers touchdown",
            "teams" : ["49ers", "raiders"],
            "score" : [7, 0],
            "lastplay" : "5yd run up the middle"
        }
    },
    "full_game" : {
        "date" : "2014.05.20",
        "background" : "Data that is not pertinent to devices"
    },
    "sequence" : 10
});
----

iOS device receives:
----
{
    "aps": {
        "alert": "Game update 49ers touchdown",
        "badge": 2,
    },
    "teams" : ["49ers", "raiders"],
    "score" : [7, 0]
}
----

Android device receives:
----
{
    "data" : {
        "summary": "Game update 49ers touchdown",
        "teams" : ["49ers", "raiders"],
        "score" : [7, 0],
        "lastplay" : "5yd run up the middle"
    }
}
----

'full_game' and 'sequence' would not be included in the payload to APNS or GCM.

Pubnub subscribers receive everything:
----
{
    "pn_apns": {
        "aps" : {
            "alert": "Game update 49ers touchdown",
            "badge": 2
        },
        "teams" : ["49ers", "raiders"],
        "score" : [7, 0]
    },
    "pn_gcm": {
        "data" : {
            "summary": "Game update 49ers touchdown",
            "teams" : ["49ers", "raiders"],
            "score" : [7, 0],
            "lastplay" : "5yd run up the middle"
        }
    },
    "full_game" : {
        "date" : "2014.05.20",
        "background" : "Data that is not pertinent to devices"
    },
    "sequence" : 10
}
----

====== *G. Send toast notification to windows phone

Params - See "Creating a toast notification using a cloud service" section on this page http://msdn.microsoft.com/en-us/library/windows/apps/jj662938(v=vs.105).aspx
----
pubnub.publish("my_channel", {
    "pn_mpns": {
        "type" : "toast",
        "text1" : "My title"
    }
});
----

====== *H. Send tile notification to windows phone

Params - See http://msdn.microsoft.com/en-us/library/windows/apps/hh202970(v=vs.105).aspx#BKMK_SendingaTileNotification

----
pubnub.publish("my_channel", {
    "pn_mpns" : {
        "type" : "tile",
        "title" : "Front title",
        "count" : 1,
        "back_title" : "Back Tile",
        "back_content" : "Back message"
    }
});
----

===== Troubleshooting

You can enable more debug logging by included a flag in the publish payload. Any messages will be sent to a side channel.

====== GCM Debugging

Use the curl example on https://developers.google.com/cloud-messaging/http#checkAPIkey[GCM docs] to test whether API key and/or registration_id is valid.

----
curl --header "Authorization: key=<API_KEY>" \
    --header Content-Type:"application/json" \
    https://gcm-http.googleapis.com/gcm/send \
    -d "{\"registration_ids\":[\"ABC\"]}"
----

This is also a simple way to send a message through GCM.

====== Debug channel

1. Include `"pn_debug" : true` in payload message

----
    {
        "aps": {
            "alert": "Game update 49ers touchdown",
            "badge": 2,
        },
        "pn_debug" : true
    }
----

2. Subscribe to <channel>-pndebug for error messages (strings)

Example messages
----
"Devices found for ['mpns'] push notification"
"Invalid APNS notification format"
"Invalid GCM notification format"
----

Note: Currently the push server will send warnings even for gateways there were not specified in the push payload.  Will revisit to make debugging less confusing for customers.

====== APIs

* Get list of all registered devices for a subkey and channel.  This API is for internal use only and requires a VPN connection.
+
----
curl "http://storageweb2.us-east-1.pubnub.com:9000/admin-push/sub-key/SUBKEY?channel=CHANNEL&type=TYPE"
----

===== Pubnub SDK Convenience methods for sending messages via push gateway


====== Javascript
```
a.pubnub = pubnub;
a.callback = console.log
a.error = console.log
a.channel = 'my_channel'
a.gcm = ['i am gcm array']
a.apns.alert = "this is alert"
a.apns.badge = 2
a.apns.key = "hi am apns"
a.send()

var b = PNmessage()
b.pubnub = pubnub;
b.callback = console.log
b.error = console.log
b.channel = 'my_channel'
b.send()

var c = PNmessage()
c.pubnub = pubnub;
c.callback = console.log
c.error = console.log
c.channel = 'my_channel'
c.gcm = ['i am gcm array']
c.apns.alert = "this is alert"
c.apns.badge = 2
c.apns.key = "hi am apns"
c.mykey = "hi"

```

```
var pnGcmMessage = pubnub.getGcmMessageObject({"key" : "I am gcm message"});
var pnApnsMessage = pubnub.getApnsMessageObject({"key" : "I am apns message", "key2" : "I am key 2"});

var pnmessage = pubnub.getPnMessageObject(pnApnsMessage, pnGcmMessage, { "key" : "this is native"});
var pnmessage1 = pubnub.getPnMessageObject(null, pnGcmMessage, { "key" : "this is native"});
var pnmessage2 = pubnub.getPnMessageObject(pnApnsMessage, null, { "key" : "this is native"});
var pnmessage3 = pubnub.getPnMessageObject(pnApnsMessage, pnGcmMessage, null);


pubnub.publish({
    channel : 'abcd',
    message : pnmessage,
    callback : function(r) {
        console.log(r);
    },
    'error' : function(r) {
        console.log(JSON.stringify(r));
    }
});

pubnub.publish({
    channel : 'abcd',
    message : pnmessage1,
    callback : function(r) {
        console.log(r);
    },
    'error' : function(r) {
        console.log(JSON.stringify(r));
    }
});

pubnub.publish({
    channel : 'abcd',
    message : pnmessage2,
    callback : function(r) {
        console.log(r);
    },
    'error' : function(r) {
        console.log(JSON.stringify(r));
    }
});

pubnub.publish({
    channel : 'abcd',
    message : pnmessage3,
    callback : function(r) {
        console.log(r);
    },
    'error' : function(r) {
        console.log(JSON.stringify(r));
    }
});
```

====== Java


```
// Create GCM Message
 
PnGcmMessage gcmMessage = new PnGcmMessage();
 
// Create the payload and set data for GCM message
 
JSONObject jso = new JSONObject();
try {
    jso.put("a", "1");
} catch (JSONException e) {
 
}
gcmMessage.setData(jso);

// Create APNS message

PnApnsMessage apnsMessage = new PnApnsMessage();

apnsMessage.setApsAlert("hi");
apnsMessage.setApnsBadge(2);
apnsMessage.setSound("melody");

apnsMessage.put("c", "3");
 

String channel = "demo";

// Create PnMessage
PnMessage message = new PnMessage(pubnub, channel, new Callback(){
    @Override
    public void successCallback(String channel, Object response) {
        System.out.println(response);
    }
 
    @Override
    public void errorCallback(String channel, PubnubError error) {
        System.out.println(error);
    }
}, apnsMessage, gcmMessage);

message.put("b", "2"); 

try {
    message.publish();
} catch (PubnubException e) {

}
```

The JSON message published by code above looks like this:

```
    "pn_apns": {
        "aps" : {
            "alert": "hi",
            "badge": 2,
            "sound": "melody"
        },
        "c" : "3"
    },
    "pn_gcm": {
        "data" : {
	    "a" : "1"
        }
    },
    "b" : "2"
}
```
