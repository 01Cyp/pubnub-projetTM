

== Pubnub Mobile Push Gateway

PubNub's Mobile Push Gateway feature enables developers to bridge native PubNub publishing with 3rd-party push notification services including Google Android GCM (Google Cloud Messaging), Apple iOS APNS (Apple Push Notification Service), and Microsoft Windows Phone MPNS (Microsoft Push Notification Service).

By using the Mobile Push Gateway, developers can eliminate the need for developing, configuring, and maintaining additional server-side components for 3rd-party push notification providers.

===== When to use Native PubNub Messaging vs PubNub Mobile Push Gateway to 3rd-Party Messaging Services ?

For mission critical messaging, PubNub recommends implementing PubNub native messaging functionality. PubNub native messaging touts a low-latency, bi-directional notification solution that can be delivered to any mobile device, secure, access restricted, and encrypted message payloads of 32KB, and the ability to recover missed messages with Storage & Playback (history) APIs.

Despite the advantages of the native PubNub approach, there are cases where a developer may choose to utilize a 3rd-party notification system, for example, when migrating existing applications already utilizing 3rd-party notification systems to PubNub native messaging. On iOS applications where running in the background is not an option, the Mobile Push Gateway provides a method to send messages quickly and reliably via PubNub whether or not the application is in the foreground or background.


=== APNS
        TO BE ADDED

=== MPNS
        TO BE ADDED

=== GCM 

==== Details

====== GCM PREREQUISITES

Before you can push GCM messages natively through Google, or through PubNub, you must first setup your GCM configuration.

* Download the Google Play services SDK - http://developer.android.com/tools/help/sdk-manager.html
* Set Up Google Play Services SDK - http://developer.android.com/google/play-services/setup.html
* Create a Google API project - http://developer.android.com/google/gcm/gs.html#create-proj
* Enable the GCM Service - http://developer.android.com/google/gcm/gs.html#gcm-service
* Obtain an Google API Key - http://developer.android.com/google/gcm/gs.html#access-key
* Once you've obtained the API Key, login to the PubNub Admin Console, and scroll down to Push Notifications â†’ Google Cloud Messaging and click on "Add" to add your API Key. http://developer.android.com/google/gcm/gs.html provides additional information about this process.

====== ROUTING TO GCM-ENABLED DEVICES

When publishing a message associated with an GCM deviceID, the message is sent to all PubNub native subscribers listening on that channel. For example, if you have native PubNub Python, Ruby, and JavaScript subscribers listening on channel foo, and you've previoulsy associated channel foo with GCM RegistrationIDs abc, and xyz, when you publish hello world to channel foo, it will be received by the PubNub native Python, Ruby, and JavaScript subscribers.

In addition, the portion of the message encapsulated within a pn_gcm attribute, containing a valid GCM object messaging format (see below), will also be forwarded to Googles's GCM gateway, where it will be sent via GCM to Android devices with GCM RegistrationIDs abc and xyz.

Behind the scenes, the PubNub Mobile Push Gateway establishes an authenticated connection to the Google GCM service based on the application's configured GCM API Key (which the developer has uploaded to the PubNub Admin Console). Assuming this API key, and application are configured correctly for Push Notifications, and the RegistrationID has been associated with the PubNub channel the message was published on, Google will accept the GCM message for delivery.

====== GOOGLE API KEY.

This key is used by Google to authenticate your application for accounting purposes. This key is uploaded to the PubNub Administrator Console upon configuring your PubNub account to enable Mobile Push Gateway.

====== GCM REGISTRATION ID (NOTE: This is deprecated. InstanceId and registration token APIs should be used now on )

The first time an Android application needs to use the GCM service, it must call the GoogleCloudMessaging method register() which should return a Registration ID. This Registration ID is then associated with one or more channels. The Android application should store this ID for later use (for instance, to check in onCreate() if it is already registered.

====== GCM REGISTRATION TOKEN

PubNub Mobile Push Gateway uses registration token provided to relay messages to devices via GCM. These tokens are obtained using Instance ID API and can be associated to a channel using utility methods available in Pubnub Java and JS SDKs.

====== GCM SENDER ID

The Sender ID is created during the GCM registration process ( Sender ID is your GCM Project Number ) and is used to obtain registration token which permits PubNub Mobile Push Gateway push notification messages to be sent to the Android device via GCM.

==== Getting registration token and receiving messages

Once you have completed prerequisites for GCM as described above you can get the registration token using Google Instance Id APIs.

```
String senderId = "" ; /*  GCM Sender ID */
// Get registration token
InstanceID instanceID = InstanceID.getInstance(this);
String token = instanceID.getToken(getString(senderId),
        GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);
```
To receive message  GcmListenerService class which extends WakefulBroadcastReceiver can be used by overriding
onMessageReceived method.

```
@Override
public void onMessageReceived(String from, Bundle data) {
    String message = data.getString("message");
    Log.d(TAG, "From: " + from);
    Log.d(TAG, "Message: " + message);
}
```

Refer to https://developers.google.com/cloud-messaging/android/start for details.

=== Registering channel for device

C#, Obj-C, Java and Javascript family SDKs provide APIs to enable push notifications by associating device/registration tokens to channel names. These APIs are wrappers over REST interface.

==== REST
<TYPE> can be:

* gcm
* apns
* mpns
* if no type specified, server will default to apns (for backwards compatibility)

===== Register channel for device

Note: If both 'add' and 'remove' are provided, the remove will be executed first

.API
----
http://pubsub.pubnub.com/v1/push/sub-key/<SUB_KEY>/devices/<PUSH_TOKEN>?add=<CHANNEL>&type=<TYPE>
----

.Response
----
# Success
[1, "Modified Channels"]

# Error
----

.Registering an apple device for channel "m3"
----
http://dara24.devbuild.pubnub.com/v1/push/sub-key/sub-c-e0d8405a-b823-11e2-89ba-02ee2ddab7fe/devices/2ed202ac08ea9033665e853a3dc8bc4c5e78f7a6cf8d55910df230567037dcc4?type=apns&add=m3
----

.Registering a android device for channels "m1" and "m2"
----
http://dara24.devbuild.pubnub.com/v1/push/sub-key/sub-c-e0d8405a-b823-11e2-89ba-02ee2ddab7fe/devices/APA91bHThLx95RbKvOpIZyPStZMtqlOTvARPdWlvqNlcxxwkzgjSF88pKd_57vcy-ABUD1McjbyEmt603TJidwysvBMQh9Medh769nK2Kb8pe7QQILVxhsOnSOKqBu6yjFDCXasVif3XpVJOxaJasZcL7Kd6vuhLLuGt4gnnkNYy53SByBM7_cU?type=gcm&add=m1,m2
----

.Registering a windows phone device for channel "m1"
----
http://dara24.devbuild.pubnub.com/v1/push/sub-key/sub-c-e0d8405a-b823-11e2-89ba-02ee2ddab7fe/devices/http://dm2.notify.live.net/throttledthirdparty/01.00/AQECOVPaH3c6T4JWPQijts9xAgAAAAADAQAAAAQUZm52OkRFNzg2NTMxMzlFMEZFNkMFBlVTTkMwMQ?type=mpns&add=m1
----

===== Remove channel for device

Note: If both 'add' and 'remove' are provided, the remove will be executed first

----
http://pubsub.pubnub.com/v1/push/sub-key/<SUB_KEY>/devices/<PUSH_TOKEN>?remove=<CHANNEL>&type=<TYPE>
----

===== Get channels for device

----
http://pubsub.pubnub.com/v1/push/sub-key/<SUB_KEY>/devices/<PUSH_TOKEN>?type=<TYPE>
----

==== Remove device and all associated channels

----
http://pubsub.pubnub.com/v1/push/sub-key/<SUB_KEY>/devices/<PUSH_TOKEN>/remove?type=<TYPE>
----

==== C#
        TO BE ADDED

==== Obj-c
        TO BE ADDED


==== Javascript


To modify associations between a channel and an APNS or GCM Device ID, use the .mobile_gw_provision() method:

```
pubnub.mobile_gw_provision ({
     device_id: 'A655FBA9931AB',
     op       : 'add', // or 'remove'
     gw_type  : 'apns', // or 'gcm' or 'mpns'
     channel  : 'my_chat',
     callback : mySuccessCallback,
     error    : myErrorCallback,
});
```
After successfully associating device IDs with channels, publishing messages in the correct formats to those channels will result in all associated devices receiving the 3rd-party notifications.

==== Java

====== Registering device to channel

enablePushNotificationsOnChannel and its variant methods associate a channel to a registration token. 
```

pubnub.enablePushNotificationsOnChannel(channel, registrationToken, new Callback(){
    @Override
    public void successCallback(String channel, Object response) {
    }
    @Override
    public void errorCallback(String channel, PubnubError error) {
        
    }
});
```

====== Removing device from channel

disablePushNotificationsOnChannel and its variant methods associate a channel to a registration token. 
```

pubnub.disablePushNotificationsOnChannel(channel, registrationToken, new Callback(){
    @Override
    public void successCallback(String channel, Object response) {
    }
    @Override
    public void errorCallback(String channel, PubnubError error) {
        
    }
});
```

===== Listing channels for device token

requestPushNotificationEnabledChannelsForDeviceRegistrationId lists channels registered to device token

```

pubnub.requestPushNotificationEnabledChannelsForDeviceRegistrationId(registrationToken, new Callback(){
    @Override
    public void successCallback(String channel, Object response) {
    }
    @Override
    public void errorCallback(String channel, PubnubError error) {
        
    }
});
```


=== Sending messages to devices


===== ROUTING TO NATIVE AND SINGLE/MULTIPLE 3RD-PARTY MESSAGING ENDPOINTS IN A SINGLE PUBLISH

It is possible to structure a single message to contain different message payloads for native PubNub and multiple 3rd-Party endpoints. To do this, just specify root-level pn_apns, pn_gcm and pn_mpns keys with appropriate platform-specific data. Its important to remember that Native PubNub devices will receive the ENTIRE payload, but 3rd-Party endpoints will only receive the data encapsulated in their associated pn_* key. All or any one of these pn_* keys can be ommitted as required.

In the below example, associated iOS devices will receive only the data within the pn_apns key, and associated GCM devices will receive only the data within the pn_gcm key. Native PubNub subscribers will receive the entire literal object, including pn_apns, pn_gcm and full_game keys.

```
{
    "pn_apns": {
        "aps" : {
            "alert": "Game update 49ers touchdown",
            "badge": 2
        },
        "teams" : ["49ers", "raiders"],
        "score" : [7, 0]
    },
    "pn_gcm": {
        "data" : {
            "summary": "Game update 49ers touchdown",
            "teams" : ["49ers", "raiders"],
            "score" : [7, 0],
            "lastplay" : "5yd run up the middle"
        }
    },
    "full_game" : {
        "date" : "2014.05.20",
        "foobar" : "Data that is not pertinent to devices"
    }
}
```
For any given published message, you may include any combination of pn_* and non-pn_* keys and data.

===== Pubnub SDK Convenience methods for sending messages via GCM

Pubnub SDK provides convenience methods for sending messages via GCM.

====== Javascript
```

```

====== Java
```
// Create GCM Message
 
PnGcmMessage gcmMessage = new PnGcmMessage();
 
// Create the payload and set data for GCM message
 
JSONObject jso = new JSONObject();
try {
    jso.put("a", "1");
} catch (JSONException e) {
 
}
gcmMessage.setData(jso);
 

String channel = "demo";

PnMessage message = new PnMessage(pubnub, channel, new Callback(){
    @Override
    public void successCallback(String channel, Object response) {
        System.out.println(response);
    }
 
    @Override
    public void errorCallback(String channel, PubnubError error) {
        System.out.println(error);
    }
}, gcmMessage);
 
try {
    message.publish();
} catch (PubnubException e) {

}
```
